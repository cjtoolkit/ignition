// +build debug

// Code generated by MockGen. DO NOT EDIT.
// Source: log.go

package loggers

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockLogger is a mock of Logger interface
type MockLogger struct {
	ctrl     *gomock.Controller
	recorder *MockLoggerMockRecorder
}

// MockLoggerMockRecorder is the mock recorder for MockLogger
type MockLoggerMockRecorder struct {
	mock *MockLogger
}

// NewMockLogger creates a new mock instance
func NewMockLogger(ctrl *gomock.Controller) *MockLogger {
	mock := &MockLogger{ctrl: ctrl}
	mock.recorder = &MockLoggerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockLogger) EXPECT() *MockLoggerMockRecorder {
	return m.recorder
}

// OutputRegistry mocks base method
func (m *MockLogger) OutputRegistry() LogOutputRegistry {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OutputRegistry")
	ret0, _ := ret[0].(LogOutputRegistry)
	return ret0
}

// OutputRegistry indicates an expected call of OutputRegistry
func (mr *MockLoggerMockRecorder) OutputRegistry() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OutputRegistry", reflect.TypeOf((*MockLogger)(nil).OutputRegistry))
}

// Clone mocks base method
func (m *MockLogger) Clone(callDepth int) Logger {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Clone", callDepth)
	ret0, _ := ret[0].(Logger)
	return ret0
}

// Clone indicates an expected call of Clone
func (mr *MockLoggerMockRecorder) Clone(callDepth interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Clone", reflect.TypeOf((*MockLogger)(nil).Clone), callDepth)
}

// Panic mocks base method
func (m *MockLogger) Panic(v ...interface{}) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range v {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Panic", varargs...)
}

// Panic indicates an expected call of Panic
func (mr *MockLoggerMockRecorder) Panic(v ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Panic", reflect.TypeOf((*MockLogger)(nil).Panic), v...)
}

// Panicf mocks base method
func (m *MockLogger) Panicf(format string, v ...interface{}) {
	m.ctrl.T.Helper()
	varargs := []interface{}{format}
	for _, a := range v {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Panicf", varargs...)
}

// Panicf indicates an expected call of Panicf
func (mr *MockLoggerMockRecorder) Panicf(format interface{}, v ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{format}, v...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Panicf", reflect.TypeOf((*MockLogger)(nil).Panicf), varargs...)
}

// Panicln mocks base method
func (m *MockLogger) Panicln(v ...interface{}) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range v {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Panicln", varargs...)
}

// Panicln indicates an expected call of Panicln
func (mr *MockLoggerMockRecorder) Panicln(v ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Panicln", reflect.TypeOf((*MockLogger)(nil).Panicln), v...)
}

// Print mocks base method
func (m *MockLogger) Print(v ...interface{}) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range v {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Print", varargs...)
}

// Print indicates an expected call of Print
func (mr *MockLoggerMockRecorder) Print(v ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Print", reflect.TypeOf((*MockLogger)(nil).Print), v...)
}

// Printf mocks base method
func (m *MockLogger) Printf(format string, v ...interface{}) {
	m.ctrl.T.Helper()
	varargs := []interface{}{format}
	for _, a := range v {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Printf", varargs...)
}

// Printf indicates an expected call of Printf
func (mr *MockLoggerMockRecorder) Printf(format interface{}, v ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{format}, v...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Printf", reflect.TypeOf((*MockLogger)(nil).Printf), varargs...)
}

// Println mocks base method
func (m *MockLogger) Println(v ...interface{}) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range v {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Println", varargs...)
}

// Println indicates an expected call of Println
func (mr *MockLoggerMockRecorder) Println(v ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Println", reflect.TypeOf((*MockLogger)(nil).Println), v...)
}

// MockLoggerOutputer is a mock of LoggerOutputer interface
type MockLoggerOutputer struct {
	ctrl     *gomock.Controller
	recorder *MockLoggerOutputerMockRecorder
}

// MockLoggerOutputerMockRecorder is the mock recorder for MockLoggerOutputer
type MockLoggerOutputerMockRecorder struct {
	mock *MockLoggerOutputer
}

// NewMockLoggerOutputer creates a new mock instance
func NewMockLoggerOutputer(ctrl *gomock.Controller) *MockLoggerOutputer {
	mock := &MockLoggerOutputer{ctrl: ctrl}
	mock.recorder = &MockLoggerOutputerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockLoggerOutputer) EXPECT() *MockLoggerOutputerMockRecorder {
	return m.recorder
}

// Output mocks base method
func (m *MockLoggerOutputer) Output(line int, file, kind, s string, stack []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Output", line, file, kind, s, stack)
	ret0, _ := ret[0].(error)
	return ret0
}

// Output indicates an expected call of Output
func (mr *MockLoggerOutputerMockRecorder) Output(line, file, kind, s, stack interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Output", reflect.TypeOf((*MockLoggerOutputer)(nil).Output), line, file, kind, s, stack)
}

// MockLogOutputRegistry is a mock of LogOutputRegistry interface
type MockLogOutputRegistry struct {
	ctrl     *gomock.Controller
	recorder *MockLogOutputRegistryMockRecorder
}

// MockLogOutputRegistryMockRecorder is the mock recorder for MockLogOutputRegistry
type MockLogOutputRegistryMockRecorder struct {
	mock *MockLogOutputRegistry
}

// NewMockLogOutputRegistry creates a new mock instance
func NewMockLogOutputRegistry(ctrl *gomock.Controller) *MockLogOutputRegistry {
	mock := &MockLogOutputRegistry{ctrl: ctrl}
	mock.recorder = &MockLogOutputRegistryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockLogOutputRegistry) EXPECT() *MockLogOutputRegistryMockRecorder {
	return m.recorder
}

// Outputters mocks base method
func (m *MockLogOutputRegistry) Outputters() []LoggerOutputer {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Outputters")
	ret0, _ := ret[0].([]LoggerOutputer)
	return ret0
}

// Outputters indicates an expected call of Outputters
func (mr *MockLogOutputRegistryMockRecorder) Outputters() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Outputters", reflect.TypeOf((*MockLogOutputRegistry)(nil).Outputters))
}

// Register mocks base method
func (m *MockLogOutputRegistry) Register(outputers ...LoggerOutputer) LogOutputRegistry {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range outputers {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Register", varargs...)
	ret0, _ := ret[0].(LogOutputRegistry)
	return ret0
}

// Register indicates an expected call of Register
func (mr *MockLogOutputRegistryMockRecorder) Register(outputers ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockLogOutputRegistry)(nil).Register), outputers...)
}

// Lock mocks base method
func (m *MockLogOutputRegistry) Lock() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Lock")
}

// Lock indicates an expected call of Lock
func (mr *MockLogOutputRegistryMockRecorder) Lock() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Lock", reflect.TypeOf((*MockLogOutputRegistry)(nil).Lock))
}
