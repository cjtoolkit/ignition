// +build debug

// Code generated by MockGen. DO NOT EDIT.
// Source: hit_miss.go

package internal

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockHitMiss is a mock of HitMiss interface
type MockHitMiss struct {
	ctrl     *gomock.Controller
	recorder *MockHitMissMockRecorder
}

// MockHitMissMockRecorder is the mock recorder for MockHitMiss
type MockHitMissMockRecorder struct {
	mock *MockHitMiss
}

// NewMockHitMiss creates a new mock instance
func NewMockHitMiss(ctrl *gomock.Controller) *MockHitMiss {
	mock := &MockHitMiss{ctrl: ctrl}
	mock.recorder = &MockHitMissMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockHitMiss) EXPECT() *MockHitMissMockRecorder {
	return m.recorder
}

// Miss mocks base method
func (m *MockHitMiss) Miss() (interface{}, []byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Miss")
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].([]byte)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Miss indicates an expected call of Miss
func (mr *MockHitMissMockRecorder) Miss() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Miss", reflect.TypeOf((*MockHitMiss)(nil).Miss))
}

// Hit mocks base method
func (m *MockHitMiss) Hit(b []byte) (interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Hit", b)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Hit indicates an expected call of Hit
func (mr *MockHitMissMockRecorder) Hit(b interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Hit", reflect.TypeOf((*MockHitMiss)(nil).Hit), b)
}
