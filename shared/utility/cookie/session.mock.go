// +build debug

// Code generated by MockGen. DO NOT EDIT.
// Source: session.go

package cookie

import (
	ctx "github.com/cjtoolkit/ctx"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockSession is a mock of Session interface
type MockSession struct {
	ctrl     *gomock.Controller
	recorder *MockSessionMockRecorder
}

// MockSessionMockRecorder is the mock recorder for MockSession
type MockSessionMockRecorder struct {
	mock *MockSession
}

// NewMockSession creates a new mock instance
func NewMockSession(ctrl *gomock.Controller) *MockSession {
	mock := &MockSession{ctrl: ctrl}
	mock.recorder = &MockSessionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockSession) EXPECT() *MockSessionMockRecorder {
	return m.recorder
}

// Set mocks base method
func (m *MockSession) Set(context ctx.Context, name string, value []byte) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Set", context, name, value)
}

// Set indicates an expected call of Set
func (mr *MockSessionMockRecorder) Set(context, name, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockSession)(nil).Set), context, name, value)
}

// Get mocks base method
func (m *MockSession) Get(context ctx.Context, name string) []byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", context, name)
	ret0, _ := ret[0].([]byte)
	return ret0
}

// Get indicates an expected call of Get
func (mr *MockSessionMockRecorder) Get(context, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockSession)(nil).Get), context, name)
}

// Delete mocks base method
func (m *MockSession) Delete(context ctx.Context, name string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Delete", context, name)
}

// Delete indicates an expected call of Delete
func (mr *MockSessionMockRecorder) Delete(context, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockSession)(nil).Delete), context, name)
}

// GetDel mocks base method
func (m *MockSession) GetDel(context ctx.Context, name string) []byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDel", context, name)
	ret0, _ := ret[0].([]byte)
	return ret0
}

// GetDel indicates an expected call of GetDel
func (mr *MockSessionMockRecorder) GetDel(context, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDel", reflect.TypeOf((*MockSession)(nil).GetDel), context, name)
}

// Destroy mocks base method
func (m *MockSession) Destroy(context ctx.Context) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Destroy", context)
}

// Destroy indicates an expected call of Destroy
func (mr *MockSessionMockRecorder) Destroy(context interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Destroy", reflect.TypeOf((*MockSession)(nil).Destroy), context)
}
