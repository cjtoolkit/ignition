// +build debug

// Code generated by MockGen. DO NOT EDIT.
// Source: hash.go

package signature

import (
	reflect "reflect"

	ctx "github.com/cjtoolkit/ctx"
	gomock "github.com/golang/mock/gomock"
)

// MockHasher is a mock of Hash interface
type MockHasher struct {
	ctrl     *gomock.Controller
	recorder *MockHasherMockRecorder
}

// MockHasherMockRecorder is the mock recorder for MockHasher
type MockHasherMockRecorder struct {
	mock *MockHasher
}

// NewMockHasher creates a new mock instance
func NewMockHasher(ctrl *gomock.Controller) *MockHasher {
	mock := &MockHasher{ctrl: ctrl}
	mock.recorder = &MockHasherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockHasher) EXPECT() *MockHasherMockRecorder {
	return m.recorder
}

// Prepend mocks base method
func (m *MockHasher) Prepend(context ctx.Context, v ...interface{}) {
	m.ctrl.T.Helper()
	varargs := []interface{}{context}
	for _, a := range v {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Prepend", varargs...)
}

// Prepend indicates an expected call of Prepend
func (mr *MockHasherMockRecorder) Prepend(context interface{}, v ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{context}, v...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Prepend", reflect.TypeOf((*MockHasher)(nil).Prepend), varargs...)
}

// Add mocks base method
func (m *MockHasher) Add(context ctx.Context, v ...interface{}) {
	m.ctrl.T.Helper()
	varargs := []interface{}{context}
	for _, a := range v {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Add", varargs...)
}

// Add indicates an expected call of Add
func (mr *MockHasherMockRecorder) Add(context interface{}, v ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{context}, v...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockHasher)(nil).Add), varargs...)
}

// Sum mocks base method
func (m *MockHasher) Sum(context ctx.Context) []byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Sum", context)
	ret0, _ := ret[0].([]byte)
	return ret0
}

// Sum indicates an expected call of Sum
func (mr *MockHasherMockRecorder) Sum(context interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Sum", reflect.TypeOf((*MockHasher)(nil).Sum), context)
}
