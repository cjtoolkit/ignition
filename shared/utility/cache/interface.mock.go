// +build debug

// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go

package cache

import (
	ctx "github.com/cjtoolkit/ctx"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
	time "time"
)

// MockCacheRepository is a mock of CacheRepository interface
type MockCacheRepository struct {
	ctrl     *gomock.Controller
	recorder *MockCacheRepositoryMockRecorder
}

// MockCacheRepositoryMockRecorder is the mock recorder for MockCacheRepository
type MockCacheRepositoryMockRecorder struct {
	mock *MockCacheRepository
}

// NewMockCacheRepository creates a new mock instance
func NewMockCacheRepository(ctrl *gomock.Controller) *MockCacheRepository {
	mock := &MockCacheRepository{ctrl: ctrl}
	mock.recorder = &MockCacheRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCacheRepository) EXPECT() *MockCacheRepositoryMockRecorder {
	return m.recorder
}

// Persist mocks base method
func (m *MockCacheRepository) Persist(name string, expiration time.Duration, miss Miss, hit Hit) interface{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Persist", name, expiration, miss, hit)
	ret0, _ := ret[0].(interface{})
	return ret0
}

// Persist indicates an expected call of Persist
func (mr *MockCacheRepositoryMockRecorder) Persist(name, expiration, miss, hit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Persist", reflect.TypeOf((*MockCacheRepository)(nil).Persist), name, expiration, miss, hit)
}

// MockCacheModifiedRepository is a mock of CacheModifiedRepository interface
type MockCacheModifiedRepository struct {
	ctrl     *gomock.Controller
	recorder *MockCacheModifiedRepositoryMockRecorder
}

// MockCacheModifiedRepositoryMockRecorder is the mock recorder for MockCacheModifiedRepository
type MockCacheModifiedRepositoryMockRecorder struct {
	mock *MockCacheModifiedRepository
}

// NewMockCacheModifiedRepository creates a new mock instance
func NewMockCacheModifiedRepository(ctrl *gomock.Controller) *MockCacheModifiedRepository {
	mock := &MockCacheModifiedRepository{ctrl: ctrl}
	mock.recorder = &MockCacheModifiedRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCacheModifiedRepository) EXPECT() *MockCacheModifiedRepositoryMockRecorder {
	return m.recorder
}

// Persist mocks base method
func (m *MockCacheModifiedRepository) Persist(context ctx.Context, name string, expiration time.Duration, miss Miss, hit Hit) interface{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Persist", context, name, expiration, miss, hit)
	ret0, _ := ret[0].(interface{})
	return ret0
}

// Persist indicates an expected call of Persist
func (mr *MockCacheModifiedRepositoryMockRecorder) Persist(context, name, expiration, miss, hit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Persist", reflect.TypeOf((*MockCacheModifiedRepository)(nil).Persist), context, name, expiration, miss, hit)
}
