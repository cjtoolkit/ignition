// +build debug

// Code generated by MockGen. DO NOT EDIT.
// Source: user.go

package client

import (
	ctx "github.com/cjtoolkit/ctx"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockUserClient is a mock of UserClient interface
type MockUserClient struct {
	ctrl     *gomock.Controller
	recorder *MockUserClientMockRecorder
}

// MockUserClientMockRecorder is the mock recorder for MockUserClient
type MockUserClientMockRecorder struct {
	mock *MockUserClient
}

// NewMockUserClient creates a new mock instance
func NewMockUserClient(ctrl *gomock.Controller) *MockUserClient {
	mock := &MockUserClient{ctrl: ctrl}
	mock.recorder = &MockUserClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockUserClient) EXPECT() *MockUserClientMockRecorder {
	return m.recorder
}

// GetUserClientData mocks base method
func (m *MockUserClient) GetUserClientData(context ctx.Context) UserClientData {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserClientData", context)
	ret0, _ := ret[0].(UserClientData)
	return ret0
}

// GetUserClientData indicates an expected call of GetUserClientData
func (mr *MockUserClientMockRecorder) GetUserClientData(context interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserClientData", reflect.TypeOf((*MockUserClient)(nil).GetUserClientData), context)
}
